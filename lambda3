import boto3
import os
from datetime import datetime

sns_client = boto3.client('sns')

def lambda_handler(event, context):
    try:
        ssm_parameter = event['detail']['name']
        release_date = event.get('time', 'UNKNOWN_DATE')  # Extract release date (event timestamp)
        formatted_date = datetime.strptime(release_date, "%Y-%m-%dT%H:%M:%SZ").strftime("%Y-%m-%d %H:%M:%S UTC")

        ami_mapping = {
            "/cba-soe/ami-amazonlinux2-latest": ("Amazon Linux 2", os.environ.get('SNS_TOPIC_AMAZONLINUX2')),
            "/cba-soe/ami-amazonlinux2eks1.28-latest": ("Amazon Linux 2 EKS 1.28", os.environ.get('SNS_TOPIC_AMAZONLINUX2EKS128')),
            "/cba-soe/ami-amazonlinux2eks1.29-latest": ("Amazon Linux 2 EKS 1.29", os.environ.get('SNS_TOPIC_AMAZONLINUX2EKS129')),
            "/cba-soe/ami-rhel7-latest": ("RHEL 7", os.environ.get('SNS_TOPIC_RHEL7')),
            "/cba-soe/ami-rhel8-latest": ("RHEL 8", os.environ.get('SNS_TOPIC_RHEL8')),
            "/cba-soe/ami-rhel9-latest": ("RHEL 9", os.environ.get('SNS_TOPIC_RHEL9')),
            "/cba-soe/ami-windows2016core-latest": ("Windows Server 2016 Core", os.environ.get('SNS_TOPIC_WIN2016_CORE')),
            "/cba-soe/ami-windows2016desktop-latest": ("Windows Server 2016 Desktop", os.environ.get('SNS_TOPIC_WIN2016_DESKTOP')),
            "/cba-soe/ami-windows2019core-latest": ("Windows Server 2019 Core", os.environ.get('SNS_TOPIC_WIN2019_CORE')),
            "/cba-soe/ami-windows2019desktop-latest": ("Windows Server 2019 Desktop", os.environ.get('SNS_TOPIC_WIN2019_DESKTOP')),
            "/cba-soe/ami-windows2022preview-latest": ("Windows Server 2022 Preview", os.environ.get('SNS_TOPIC_WIN2022_PREVIEW')),
            "/cba-soe/ami-test-latest": ("Test Preview", os.environ.get('SNS_TOPIC_TEST_LATEST'))
        }

        if ssm_parameter in ami_mapping:
            soe_name, topic_arn = ami_mapping[ssm_parameter]

            # Construct the SNS message
            message = (
                f"**SOE Update Notification**\n\n"
                f"âœ… **SOE Name:** {soe_name}\n"
                f"ðŸ“… **Release Date:** {formatted_date}\n\n"
                f"A new version of {soe_name} SOE has been released."
            )

            sns_client.publish(
                TopicArn=topic_arn,
                Subject=f"Public Cloud SOE Update - {soe_name}",
                Message=message
            )

            print(f"Notification sent for {soe_name} (Release Date: {formatted_date})")

        else:
            print(f"No SNS topic found for {ssm_parameter}")

    except KeyError as e:
        print(f"[ERROR] Missing key in event: {e}")
        print(f"Event received: {event}")
    except Exception as e:
        print(f"[ERROR] Unexpected error: {e}")
