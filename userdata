#!/bin/bash

# Variables
MOUNT_POINT="/opt"

# Install required packages
yum install -y rsync

# Detect the root device to avoid it
NEW_DISK=$(lsblk -o NAME,SIZE,TYPE,MOUNTPOINT | grep 'disk' | grep -v 'MOUNTPOINT' | tail -n 1 | awk '{print "/dev/" $1}')

# Check if the disk is found
if [ -z "$NEW_DISK" ]; then
    echo "No unmounted disk found."
    exit 1
fi

echo "Newly attached disk: $NEW_DISK"

# Format the unformatted EBS volume as ext4
echo "Formatting the volume: $EBS_VOLUME_DEVICE"
mkfs.ext4 $NEW_DISK

# Mount the new EBS volume to temporary mount point
mkdir /mnt/temp_opt
mount $NEW_DISK /mnt/temp_opt

# Copy the content of /opt to new temp_opt
rsync -avx /opt/ /mnt/temp_opt/

# unmount temporary /opt
umount /mnt/temp_opt

# Mount point for /opt
mount $NEW_DISK $MOUNT_POINT

# Mount the unformatted EBS volume to /opt temporarily
mount $NEW_DISK $MOUNT_POINT

# Modify fstab to mount the EBS volume at boot
echo "Updating /etc/fstab"
echo "$NEW_DISK $MOUNT_POINT ext4 defaults,nofail 0 2" >> /etc/fstab

# Ensure the volume mounts automatically after reboot
mount -a
systemctl daemon reload

=====================


name: 'Install Qualys Agent'
description: 'This document is for installing Qualys in Ubuntu22 SOE.'
schemaVersion: 1.0
parameters:
  - QUALYS_INSTALLER_PACKAGE_NAME:
      type: string
      default: 'QualysCloudAgent-LINUX_UBUNTU-6.3.0.67-x64.deb'
      description: Qualys installer file
  - QUALYS_PROXYCERT_NAME:
      type: string
      default: 'qgs.proxy.cer'
      description: Qualys proxy certificate
phases:
  - name: build
    steps:
    - name: DownloadFromArtifactory
      action: ExecuteBash
      inputs:
          commands:
            - |
              set -ex
              DEBIAN_FRONTEND=noninteractive touch /var/log/soebuild-transcripts/QualysInstall.log
              DEBIAN_FRONTEND=noninteractive chmod 644 /var/log/soebuild-transcripts/QualysInstall.log
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/QualysInstall.log 2>&
              ARTIFACTORY_TOKEN=$(aws secretsmanager get-secret-value --secret-id SOE/Artifactory/ServiceAccount/Token --query SecretString --output text --region ap-southeast-2)
              mkdir -p /root/soebuild/Qualys
              cd /root/soebuild/Qualys
              echo "Downloading Qualys installer file from artifactory"
              QUALYS_INSTALLER_PACKAGE_NAME=QualysCloudAgent-LINUX_UBUNTU-6.3.0.67-x64.deb
              curl -sSf -u acoe_artifact_pubsoe:${ARTIFACTORY_TOKEN} -O https://artifactory.internal.cba/artifactory/cloudservices-public-cloud-soe-generic/soe_apps/qualys/linux/$QUALYS_INSTALLER_PACKAGE_NAME
    
    - name: PrepareQualysFiles
      action: ExecuteBash
      inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/QualysInstall.log 2>&1
              echo "Prepare Qualys installer"
              cd /root/soebuild/Qualys
              QUALYS_INSTALLER_PACKAGE_NAME=QualysCloudAgent-LINUX_UBUNTU-6.3.0.67-x64.deb
              chmod 755 $QUALYS_INSTALLER_PACKAGE_NAME
              dpkg -i $QUALYS_INSTALLER_PACKAGE_NAME
              DEBIAN_FRONTEND=noninteractive apt-get install -f
              echo 'qualys_https_proxy=http://qvm-aws:8080' >>  /etc/environment
    - name: InstallQualys
      action: ExecuteBash
      inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/QualysInstall.log 2>&1
              echo "Install Qualys"
              /usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh ActivationId=ee2ef87b-2969-4a2b-ba83-f5a4205931f9 CustomerId=9c0e25eb-5ddc-5af6-e040-10ac13043f6a
              echo "Install Qualys cert"
              systemctl start qualys-cloud-agent.service
              systemctl enable qualys-cloud-agent.service
              echo "Creating systemd override for Qualys Cloud Agent"
              mkdir -p /etc/systemd/system/qualys-cloud-agent.service.d
              echo -e "[Service]\nRestart=always" > /etc/systemd/system/qualys-cloud-agent.service.d/override.conf
              systemctl daemon-reload
              systemctl restart qualys-cloud-agent.service
              echo "Creating custom systemd service to restart Qualys Cloud Agent on reboot"
              echo -e "[Unit]\nDescription=Restart Qualys Cloud Agent Service\nAfter=network.target\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/systemctl restart qualys-cloud-agent.service\n\n[Install]\nWantedBy=multi-user.target" | sudo tee /etc/systemd/system/qualys-restart.service
              systemctl daemon-reload
              systemctl enable qualys-restart.service
              echo "Qualys Cloud Agent setup complete with auto-restart on reboot"
  - name: test
    steps:
      - name: VerifyQualysAgent
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/QualysInstall.log 2>&1

              i=0
              max=10
              check_interval=30

              while true
              do
                STATUS=$(systemctl is-active qualys-cloud-agent.service)
                if [ "$STATUS" == "active" ]; then
                        echo "Qualys agent is running"
                        break
                fi

                ((i++))
                if [ $i -ge $max ]; then
                        echo "Qualys agent verification failed with status=${STATUS}"
                        exit 1
                fi

                sleep $check_interval

              done



======================================================


name: InstallCISHardening
description: Install build tools and download CIS hardening scripts to prepare for Ubuntu22 SOE build.
schemaVersion: 1.0

phases:
  - name: build
    steps:
      - name: update-rsyslog-permissions
        action: ExecuteBash
        inputs:
          commands:
            - |
              chmod 640 /etc/rsyslog.conf

      - name: update-audit-rules
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/audit.log 2>&1
              
              chmod 644 /var/log/soebuild-transcripts/audit.log
              cd /root
              GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id SOE/Github/ServiceAccount/Token --query SecretString --output text --region ap-southeast-2)

              # Build the pubsoe-1970
              git clone https://acoe_github_pubsoe:${GITHUB_TOKEN}@github.source.internal.cba/CloudServices/stfs-odpengaudit

              cd /etc/audit
              mv -f auditd.conf auditd.conf.backup
              cp /root/stfs-odpengaudit/files/linux/Ubuntu2204/auditd.conf ./
              mv -f rules.d rules.d.backup
              cp -rp /root/stfs-odpengaudit/files/linux/Ubuntu2204/rules.d ./

              cd

              chown -R root:root "/etc/audit/*"

              systemctl force-reload auditd

      - name: DisableIPV6
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/audit.log 2>&1

              add_line_to_conf() {
                grep -qE "^$1" $2
                if [ $? != 0 ]; then

                  # If the line does not exist in the file, make a backup of the file with an Unix time stamp
                  cp $2 $2.`date +%s`

                  # Add a new line if the file does not end with $
                  tail -c1 $2 | read -r _ || echo >> $2
                  echo $1 >> $2
                fi
              }

              sed -i 's/\(^GRUB_CMDLINE_LINUX=\"\)/\1ipv6.disable=1 /' /etc/default/grub

              add_line_to_conf "net.ipv6.conf.all.disable_ipv6 = 1" /etc/sysctl.conf
              add_line_to_conf "net.ipv6.conf.default.disable_ipv6 = 1" /etc/sysctl.conf
              add_line_to_conf "net.ipv6.conf.lo.disable_ipv6 = 1" /etc/sysctl.conf

              sysctl -p

              update-grub

      - name: SetupUFW
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/audit.log.log 2>&1

              # Disable ipv 6 in ufw
              sed -i '/^IPV6=/s/yes/no/' /etc/default/ufw

              ufw reload

              ufw --force reset

              # Allow SSH and DNS in
              ufw allow 22/tcp
              ufw allow 53

              # Allow on loopback
              ufw allow in on lo
              ufw allow out on lo

              ufw deny from 127.0.0.0/8 to any

              ufw default deny incoming

              # SSH
              ufw allow out 22/tcp

              # DNS and DHCP
              ufw allow out 53
              ufw allow out 67/udp

              # HTTP and HTTPS
              ufw allow out 80/tcp
              ufw allow out 443/tcp

              # NTP
              ufw allow out 123/udp

              # Syslog
              ufw allow out 514/udp

              # LDAP over SSL
              ufw allow out 636/tcp

              # Splunk
              ufw allow out 8080/tcp
              ufw allow out 8089/tcp

              ufw allow out 9998/tcp

              # AD login
              ufw allow out 3128/tcp
              ufw allow out 88

              # Tanium service port
              ufw allow out 17472/tcp

              # Allow all out traffic for Beacon team to install their apps for the meanwhile
              ufw default deny outgoing
              #ufw default allow outgoing

              ufw --force enable

              ufw status verbose

      - name: SysConfigFix
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/audit.log.log 2>&1

              # Disable ipv6 to avoid NFS server errors
              sed -i '/^udp6/s/^/#/' /etc/netconfig
              sed -i '/^tcp6/s/^/#/' /etc/netconfig

  - name: validate
    steps:
      - name: ValidateCISAndClean
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -ex
              # Redirect all output to the log file
              exec >> /var/log/soebuild-transcripts/audit.log.log 2>&1

