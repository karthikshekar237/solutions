AWSTemplateFormatVersion: '2010-09-09'
Description: Creates SNS topics for SSM Parameter updates and triggers a Lambda function to process notifications.

Parameters:
  AWSAccountID:
    Type: String
    Description: AWS Account ID where the IAM Role exists.

Resources:
  # SSM Parameters for different SOEs
  TestParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cba-soe/ami-test-latest
      Description: Test SSM Parameter
      Type: String
      Value: initial

  # SNS Topics for SOEs
  SNSTopicTest:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-test-latest-updates
      DisplayName: "SSM Change Notification for Test"

  SNSTopicAmazonLinux2:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-amazonlinux2-latest-updates
      DisplayName: "SSM Change Notification for Amazon Linux 2"

  SNSTopicAmazonLinux2EKS128:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-amazonlinux2eks128-latest-updates
      DisplayName: "SSM Change Notification for Amazon Linux 2 EKS 1.28"

  SNSTopicAmazonLinux2EKS129:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-amazonlinux2eks129-latest-updates
      DisplayName: "SSM Change Notification for Amazon Linux 2 EKS 1.29"

  SNSTopicRHEL7:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-rhel7-latest-updates
      DisplayName: "SSM Change Notification for RHEL 7"

  SNSTopicRHEL8:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-rhel8-latest-updates
      DisplayName: "SSM Change Notification for RHEL 8"

  SNSTopicRHEL9:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-rhel9-latest-updates
      DisplayName: "SSM Change Notification for RHEL 9"

  SNSTopicWindows2016Core:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: soe-windows2016core-latest-updates
      DisplayName: "SSM Change Notification for Windows 2016 Core"

  # EventBridge Rule for triggering Lambda on SSM Parameter updates
  EventRuleSSMUpdate:
    Type: AWS::Events::Rule
    Properties:
      Name: soe-ssm-update-event
      EventBusName: default
      EventPattern:
        source:
          - "aws.ssm"
        detail-type:
          - "Parameter Store Change"
        detail:
          operation:
            - "Update"
      State: "ENABLED"
      Targets:
        - Id: "LambdaTarget"
          Arn: !GetAtt LambdaFunc.Arn

  # Lambda Function for processing notifications
  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: soe-ssm-update-handler
      Description: Sends SNS notifications based on SSM Parameter Store updates.
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !Sub "arn:aws:iam::${AWSAccountID}:role/GHA-CICD"
      Timeout: 240
      Environment:
        Variables:
          SNS_TOPIC_AMAZONLINUX2: !Ref SNSTopicAmazonLinux2
          SNS_TOPIC_AMAZONLINUX2EKS128: !Ref SNSTopicAmazonLinux2EKS128
          SNS_TOPIC_AMAZONLINUX2EKS129: !Ref SNSTopicAmazonLinux2EKS129
          SNS_TOPIC_RHEL7: !Ref SNSTopicRHEL7
          SNS_TOPIC_RHEL8: !Ref SNSTopicRHEL8
          SNS_TOPIC_RHEL9: !Ref SNSTopicRHEL9
          SNS_TOPIC_WIN2016_CORE: !Ref SNSTopicWindows2016Core
          SNS_TOPIC_TEST_LATEST: !Ref SNSTopicTest
      Code:
        ZipFile: |
          import boto3
          import os
          from datetime import datetime

          sns_client = boto3.client('sns')

          def lambda_handler(event, context):
              try:
                  ssm_parameter = event['detail']['name']
                  release_date = event.get('time', 'UNKNOWN_DATE')

                  formatted_date = "UNKNOWN_DATE"
                  if release_date != "UNKNOWN_DATE":
                      formatted_date = datetime.strptime(release_date, "%Y-%m-%dT%H:%M:%SZ").strftime("%Y-%m-%d %H:%M:%S UTC")

                  ami_mapping = {
                      "/cba-soe/ami-amazonlinux2-latest": ("Amazon Linux 2", "SNS_TOPIC_AMAZONLINUX2"),
                      "/cba-soe/ami-amazonlinux2eks1.28-latest": ("Amazon Linux 2 EKS 1.28", "SNS_TOPIC_AMAZONLINUX2EKS128"),
                      "/cba-soe/ami-amazonlinux2eks1.29-latest": ("Amazon Linux 2 EKS 1.29", "SNS_TOPIC_AMAZONLINUX2EKS129"),
                      "/cba-soe/ami-rhel7-latest": ("RHEL 7", "SNS_TOPIC_RHEL7"),
                      "/cba-soe/ami-rhel8-latest": ("RHEL 8", "SNS_TOPIC_RHEL8"),
                      "/cba-soe/ami-rhel9-latest": ("RHEL 9", "SNS_TOPIC_RHEL9"),
                      "/cba-soe/ami-windows2016core-latest": ("Windows Server 2016 Core", "SNS_TOPIC_WIN2016_CORE"),
                      "/cba-soe/ami-test-latest": ("Test Preview", "SNS_TOPIC_TEST_LATEST")
                  }

                  if ssm_parameter in ami_mapping:
                      soe_name, topic_env_var = ami_mapping[ssm_parameter]
                      topic_arn = os.environ.get(topic_env_var)

                      if not topic_arn:
                          print(f"[WARNING] No SNS Topic ARN found for {soe_name}. Skipping notification.")
                          return

                      message = (
                          f"**SOE Update Notification**\n\n"
                          f"âœ… **SOE Name:** {soe_name}\n"
                          f"ðŸ“… **Release Date:** {formatted_date}\n\n"
                          f"A new version of {soe_name} SOE has been released."
                      )

                      sns_client.publish(
                          TopicArn=topic_arn,
                          Subject=f"Public Cloud SOE Update - {soe_name}",
                          Message=message
                      )

                      print(f"Notification sent for {soe_name} (Release Date: {formatted_date})")
                  else:
                      print(f"No SNS topic found for {ssm_parameter}")

              except KeyError as e:
                  print(f"[ERROR] Missing key in event: {e}")
                  print(f"Event received: {event}")
              except Exception as e:
                  print(f"[ERROR] Unexpected error: {e}")

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaFunc
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventRuleSSMUpdate.Arn

Outputs:
  AmazonLinux2Topic:
    Value: !Ref SNSTopicAmazonLinux2
    Description: "SNS Topic for Amazon Linux 2 AMI Updates"

  RHEL8Topic:
    Value: !Ref SNSTopicRHEL8
    Description: "SNS Topic for RHEL 8 AMI Updates"

  Windows2016CoreTopic:
    Value: !Ref SNSTopicWindows2016Core
    Description: "SNS Topic for Windows 2016 Core AMI Updates"
